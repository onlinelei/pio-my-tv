// #include <Arduino.h>
// #include <Thread.h>
// #include <StaticThreadController.h> //协程控制
// #include <lvgl.h>

// #include "ThreadController.h"
// #include "PinController.h"
// #include "ButtonHandler.h"
// #include "DisplayController.h"
// #include "Animation.h"
// #include "WiFiManager.h"

// // DisplayController &displayController = DisplayController::getInstance();
// // TFT_eSPI &tft = displayController.getTFT();

// // TFT_eSPI tft = TFT_eSPI();

// // void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
// // {
// //     uint32_t w = (area->x2 - area->x1 + 1);
// //     uint32_t h = (area->y2 - area->y1 + 1);

// //     tft.startWrite();
// //     tft.setAddrWindow(area->x1, area->y1, w, h);
// //     tft.pushColors((uint16_t *)&color_p->full, w * h, true);
// //     tft.endWrite();

// //     lv_disp_flush_ready(disp);
// // }

// // #define LV_TICK_PERIOD_MS 30

// // void lv_tick_handler(void)
// // {
// //     static uint32_t last_tick = 0;
// //     uint32_t current_tick = millis();
// //     uint32_t elapsed_time = current_tick - last_tick;
// //     lv_tick_inc(elapsed_time);
// //     last_tick = current_tick;
// // }

// // hw_timer_t *timer = NULL;

// void setup()
// {
//     Serial.begin(115200);
//     // PinController::getInstance().init();
//     // ButtonHandler::getInstance().init(15, 13);
//     // DisplayController::getInstance().init();
//     // ThreadController::getInstance().init();
//     // WiFiManager::getInstance().init();

//     // 禁用看门狗定时器
//     // disableCore0WDT();
//     // disableCore1WDT();

//     // Serial.begin(115200);
//     // Serial.print("Free heap: ");
//     // Serial.println(ESP.getFreeHeap());

//     // // tft.begin();
//     // // Serial.println("TFT initialized.");
//     // // tft.setRotation(1);
//     // DisplayController::getInstance().init();
//     // Serial.println("TFT initialized.");

//     // lv_init();
//     // Serial.println("LVGL initialized.");

//     // static lv_disp_draw_buf_t disp_buf;
//     // static lv_color_t *buf = new lv_color_t[LV_HOR_RES * 20];
//     // if (buf == NULL)
//     // {
//     //     Serial.println("Memory allocation failed!");
//     //     while (1)
//     //         ;
//     // }
//     // lv_disp_draw_buf_init(&disp_buf, buf, NULL, LV_HOR_RES * 20);
//     // Serial.println("Display buffer initialized.");

//     // lv_disp_drv_t disp_drv;
//     // lv_disp_drv_init(&disp_drv);
//     // disp_drv.flush_cb = my_disp_flush;
//     // disp_drv.draw_buf = &disp_buf;
//     // lv_disp_drv_register(&disp_drv);
//     // Serial.println("Display driver registered.");

//     // // 设置 LVGL 的 tick 处理函数
//     // timer = timerBegin(0, 80, true);
//     // timerAttachInterrupt(timer, &lv_tick_handler, true);
//     // timerAlarmWrite(timer, LV_TICK_PERIOD_MS * 1000, true);
//     // timerAlarmEnable(timer);
//     // Serial.println("Tick handler set up.");

//     // // 重新启用看门狗定时器
//     // enableCore0WDT();
//     // enableCore1WDT();
// }

// void loop()
// {
//     // // tft.fillScreen(TFT_MAROON);
//     // ThreadController::getInstance().run();
//     // // animation.lodingPage();

//     //     Serial.println("run first .......");
//     //     lv_task_handler();
//     //     // delay(5); // 减少 delay 时间
//     //     Serial.println("run .......");
// }

#include <lvgl.h>
#include <TFT_eSPI.h>

// 确保 lv_conf.h 被包含
#include "lv_conf.h"
// #include <demos/music/lv_demo_music.h>
// #include <demos/widgets/lv_demo_widgets.h>
#include <demos/benchmark/lv_demo_benchmark.h>
// #include "layouts/lv_example_layout.h"
// #include "scroll/lv_example_scroll.h"
// #include "anim/lv_example_anim.h"
// #include "event/lv_example_event.h"
// #include "others/lv_example_others.h"
// #include "libs/lv_example_libs.h"

static lv_disp_draw_buf_t draw_buf;
static lv_color_t buf[TFT_WIDTH * TFT_HEIGHT / 10];

TFT_eSPI tft = TFT_eSPI(TFT_WIDTH, TFT_HEIGHT); /* TFT instance */

/* Display flushing */
void my_disp_flush(lv_disp_drv_t *disp_drv, const lv_area_t *area, lv_color_t *color_p)
{
    uint32_t w = (area->x2 - area->x1 + 1);
    uint32_t h = (area->y2 - area->y1 + 1);

    tft.startWrite();
    tft.setAddrWindow(area->x1, area->y1, w, h);
    tft.pushColors((uint16_t *)&color_p->full, w * h, true);
    tft.endWrite();

    lv_disp_flush_ready(disp_drv);
}

void setup()
{
    Serial.begin(115200);

    lv_init();

    tft.begin();
    tft.setRotation(4);

    lv_disp_draw_buf_init(&draw_buf, buf, NULL, TFT_WIDTH * TFT_HEIGHT / 10);

    /*Initialize the display*/
    static lv_disp_drv_t disp_drv;
    lv_disp_drv_init(&disp_drv);
    /*Change the following line to your display resolution*/
    disp_drv.hor_res = TFT_WIDTH;
    disp_drv.ver_res = TFT_HEIGHT;
    disp_drv.flush_cb = my_disp_flush;
    disp_drv.draw_buf = &draw_buf;
    lv_disp_drv_register(&disp_drv);

    /* Create simple label */
    // lv_obj_t *label = lv_label_create(lv_scr_act());
    // lv_label_set_text(label, "Hello Ardino and LVGL! 11");
    // lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);

    /*Or try out a demo. Don't forget to enable the demos in lv_conf.h. E.g. LV_USE_DEMOS_WIDGETS*/
    // lv_demo_widgets();
    //  lv_example_arc_1();
    lv_demo_benchmark();
    //   lv_demo_keypad_encoder();
    //  lv_demo_music();
    //   lv_demo_printer();
    //   lv_demo_stress();

    Serial.println("Setup done");
}

void loop()
{
    lv_timer_handler(); /* let the GUI do its work */
    delay(5);
}
